# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build on Windows

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download vcpkg cache
      uses: ethanjli/cached-download-action@v0.1.2
      with:
          url: https://rm5248.com/renegade/vcpkg-export-20250316-091749.zip
          destination: ${{github.workspace}}/vcpkg.zip
#    - name: Setup anew (or from cache) vcpkg (and does not build any package)
#      uses: lukka/run-vcpkg@v11

    - name: Extract vcpkg
      run: 7z x vcpkg.zip

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg-export-20250316-091749/scripts/buildsystems/vcpkg.cmake -DVCPKG_EXPORT=vcpkg-export-20250316-091749 -DVCPKG_ROOT=${{github.workspace}}/vcpkg-export-20250316-091749 -DVCPKG_MANIFEST_DIR=""

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Create windows zip
      shell: pwsh
      run: |
        mkdir ./build/mix-utilities
        mkdir ./build/dummy-folder
        cp ./build/${{env.BUILD_TYPE}}/*.dll ./build/mix-utilities
        cp ./build/${{env.BUILD_TYPE}}/*.exe ./build/mix-utilities
        cp -r ./build/${{env.BUILD_TYPE}}/generic ./build/mix-utilities
        cp -r ./build/${{env.BUILD_TYPE}}/imageformats ./build/mix-utilities
        cp -r ./build/${{env.BUILD_TYPE}}/networkinformation ./build/mix-utilities
        cp -r ./build/${{env.BUILD_TYPE}}/platforms ./build/mix-utilities
        cp -r ./build/${{env.BUILD_TYPE}}/styles ./build/mix-utilities
        cp -r ./build/${{env.BUILD_TYPE}}/tls ./build/mix-utilities
        cp -r ./build/${{env.BUILD_TYPE}}/translations ./build/mix-utilities
        cd build
        7z a mix-utilities.zip mix-utilities

    - name: Archive binaries
      uses: actions/upload-artifact@v4
      with:
        name: mix-utilities
        path: |
          build/mix-utilities/*
          build/dummy-folder/
